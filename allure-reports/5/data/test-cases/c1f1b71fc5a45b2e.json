{"uid":"c1f1b71fc5a45b2e","name":"Change pet status to 'sold'","fullName":"tests.test_api.TestApi#test_change_status_to_sold_200","historyId":"8cd997c19067b2bf64878160a7a6b9f0","time":{"start":1704888919368,"stop":1704888920514,"duration":1146},"status":"failed","statusMessage":"AssertionError: assert 405 == 200\n +  where 405 = <Response [405]>.status_code","statusTrace":"self = <test_api.TestApi object at 0x00000164D03EA450>, api_client = <utils.api_client.ApiClient object at 0x00000164CF4777D0>\n\n    @allure.title(\"Change pet status to 'sold'\")\n    def test_change_status_to_sold_200(self, api_client):\n        pet = {\n            \"id\": 1,\n            \"category\": {\n                \"id\": 1,\n                \"name\": \"category1\"\n            },\n            \"name\": \"doggie\",\n            \"photoUrls\": [\n                \"https://example.com/pet_photo.jpg\"\n            ],\n            \"tags\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"tag1\"\n                }\n            ],\n            \"status\": \"sold\"\n        }\n        response = api_client.put(\"/pet/1\", pet)\n        print(response)\n        with allure.step(f\"Check status {response.status_code}\"):\n>           assert response.status_code == 200\nE           assert 405 == 200\nE            +  where 405 = <Response [405]>.status_code\n\ntests\\test_api.py:78: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 405 == 200\n +  where 405 = <Response [405]>.status_code","statusTrace":"self = <test_api.TestApi object at 0x00000164D03EA450>, api_client = <utils.api_client.ApiClient object at 0x00000164CF4777D0>\n\n    @allure.title(\"Change pet status to 'sold'\")\n    def test_change_status_to_sold_200(self, api_client):\n        pet = {\n            \"id\": 1,\n            \"category\": {\n                \"id\": 1,\n                \"name\": \"category1\"\n            },\n            \"name\": \"doggie\",\n            \"photoUrls\": [\n                \"https://example.com/pet_photo.jpg\"\n            ],\n            \"tags\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"tag1\"\n                }\n            ],\n            \"status\": \"sold\"\n        }\n        response = api_client.put(\"/pet/1\", pet)\n        print(response)\n        with allure.step(f\"Check status {response.status_code}\"):\n>           assert response.status_code == 200\nE           assert 405 == 200\nE            +  where 405 = <Response [405]>.status_code\n\ntests\\test_api.py:78: AssertionError","steps":[{"name":"Put request to '/pet/1'","time":{"start":1704888919368,"stop":1704888920513,"duration":1145},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"path","value":"'/pet/1'"},{"name":"data","value":"{'id': 1, 'category': {'id': 1, 'name': 'category1'}, 'name': 'doggie', 'photoUrls': ['https://example.com/pet_photo.jpg'], 'tags': [{'id': 1, 'name': 'tag1'}], 'status': 'sold'}"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Check status 405","time":{"start":1704888920513,"stop":1704888920513,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 405 == 200\n +  where 405 = <Response [405]>.status_code\n","statusTrace":"  File \"D:\\Pycharm_Projects\\api-testing-exam\\tests\\test_api.py\", line 78, in test_change_status_to_sold_200\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"9e08cff2f460309f","name":"stdout","source":"9e08cff2f460309f.txt","type":"text/plain","size":17}],"parameters":[],"stepsCount":2,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_api"},{"name":"subSuite","value":"TestApi"},{"name":"host","value":"DESKTOP-CPFF6BR"},{"name":"thread","value":"27720-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"9e28cf997d01edd4","reportUrl":"../4/index.html#testresult/9e28cf997d01edd4","status":"failed","statusDetails":"AssertionError: assert 405 == 200\n +  where 405 = <Response [405]>.status_code","time":{"start":1704888919368,"stop":1704888920514,"duration":1146}},{"uid":"15bbb78f526a47f4","reportUrl":"../3/index.html#testresult/15bbb78f526a47f4","status":"failed","statusDetails":"AssertionError: assert 405 == 200\n +  where 405 = <Response [405]>.status_code","time":{"start":1704888919368,"stop":1704888920514,"duration":1146}}]},"tags":[]},"source":"c1f1b71fc5a45b2e.json","parameterValues":[]}
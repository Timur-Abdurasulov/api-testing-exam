{"uid":"e72ede397dc9edd5","name":"Change data of a pet with invalid id","fullName":"tests.test_api.TestApi#test_update_pet_with_invalid_id_400","historyId":"bdcce4e612080fe2843d0f344438e392","time":{"start":1704888922815,"stop":1704888923944,"duration":1129},"status":"failed","statusMessage":"AssertionError: assert 405 == 400\n +  where 405 = <Response [405]>.status_code","statusTrace":"self = <test_api.TestApi object at 0x00000164D03E9FA0>, api_client = <utils.api_client.ApiClient object at 0x00000164CF4777D0>\n\n    @allure.title(\"Change data of a pet with invalid id\")\n    def test_update_pet_with_invalid_id_400(self, api_client):\n        pet = {\n            \"id\": \"p\",\n            \"category\": {\n                \"id\": 9,\n                \"name\": \"category9\"\n            },\n            \"name\": \"doggie9\",\n            \"photoUrls\": [\n                \"https://example.com/pet99_photo.jpg\"\n            ],\n            \"tags\": [\n                {\n                    \"id\": 9,\n                    \"name\": \"tag9\"\n                }\n            ],\n            \"status\": \"available\"\n        }\n        response = api_client.put(\"/pet/p\", pet)\n        print(response)\n        with allure.step(f\"Check status {response.status_code}\"):\n>           assert response.status_code == 400\nE           assert 405 == 400\nE            +  where 405 = <Response [405]>.status_code\n\ntests\\test_api.py:157: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 405 == 400\n +  where 405 = <Response [405]>.status_code","statusTrace":"self = <test_api.TestApi object at 0x00000164D03E9FA0>, api_client = <utils.api_client.ApiClient object at 0x00000164CF4777D0>\n\n    @allure.title(\"Change data of a pet with invalid id\")\n    def test_update_pet_with_invalid_id_400(self, api_client):\n        pet = {\n            \"id\": \"p\",\n            \"category\": {\n                \"id\": 9,\n                \"name\": \"category9\"\n            },\n            \"name\": \"doggie9\",\n            \"photoUrls\": [\n                \"https://example.com/pet99_photo.jpg\"\n            ],\n            \"tags\": [\n                {\n                    \"id\": 9,\n                    \"name\": \"tag9\"\n                }\n            ],\n            \"status\": \"available\"\n        }\n        response = api_client.put(\"/pet/p\", pet)\n        print(response)\n        with allure.step(f\"Check status {response.status_code}\"):\n>           assert response.status_code == 400\nE           assert 405 == 400\nE            +  where 405 = <Response [405]>.status_code\n\ntests\\test_api.py:157: AssertionError","steps":[{"name":"Put request to '/pet/p'","time":{"start":1704888922815,"stop":1704888923944,"duration":1129},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"path","value":"'/pet/p'"},{"name":"data","value":"{'id': 'p', 'category': {'id': 9, 'name': 'category9'}, 'name': 'doggie9', 'photoUrls': ['https://example.com/pet99_photo.jpg'], 'tags': [{'id': 9, 'name': 'tag9'}], 'status': 'available'}"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Check status 405","time":{"start":1704888923944,"stop":1704888923944,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 405 == 400\n +  where 405 = <Response [405]>.status_code\n","statusTrace":"  File \"D:\\Pycharm_Projects\\api-testing-exam\\tests\\test_api.py\", line 157, in test_update_pet_with_invalid_id_400\n    assert response.status_code == 400\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"e866b4f958ee8a72","name":"stdout","source":"e866b4f958ee8a72.txt","type":"text/plain","size":17}],"parameters":[],"stepsCount":2,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_api"},{"name":"subSuite","value":"TestApi"},{"name":"host","value":"DESKTOP-CPFF6BR"},{"name":"thread","value":"27720-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"a9476cb5467ce3b","reportUrl":"../4/index.html#testresult/a9476cb5467ce3b","status":"failed","statusDetails":"AssertionError: assert 405 == 400\n +  where 405 = <Response [405]>.status_code","time":{"start":1704888922815,"stop":1704888923944,"duration":1129}}]},"tags":[]},"source":"e72ede397dc9edd5.json","parameterValues":[]}
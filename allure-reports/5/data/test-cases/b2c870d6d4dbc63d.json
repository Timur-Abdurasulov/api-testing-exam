{"uid":"b2c870d6d4dbc63d","name":"Change data of non existent pet","fullName":"tests.test_api.TestApi#test_update_non_existent_pet_404","historyId":"99a8f44cec7d83822da306a2daf1debf","time":{"start":1704888921653,"stop":1704888922810,"duration":1157},"status":"failed","statusMessage":"AssertionError: assert 405 == 404\n +  where 405 = <Response [405]>.status_code","statusTrace":"self = <test_api.TestApi object at 0x00000164D03EA150>, api_client = <utils.api_client.ApiClient object at 0x00000164CF4777D0>\n\n    @allure.title(\"Change data of non existent pet\")\n    def test_update_non_existent_pet_404(self, api_client):\n        pet = {\n            \"id\": 99,\n            \"category\": {\n                \"id\": 99,\n                \"name\": \"category99\"\n            },\n            \"name\": \"doggie99\",\n            \"photoUrls\": [\n                \"https://example.com/pet99_photo.jpg\"\n            ],\n            \"tags\": [\n                {\n                    \"id\": 99,\n                    \"name\": \"tag99\"\n                }\n            ],\n            \"status\": \"available\"\n        }\n        response = api_client.put(\"/pet/99\", pet)\n        print(response)\n        with allure.step(f\"Check status {response.status_code}\"):\n>           assert response.status_code == 404\nE           assert 405 == 404\nE            +  where 405 = <Response [405]>.status_code\n\ntests\\test_api.py:132: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 405 == 404\n +  where 405 = <Response [405]>.status_code","statusTrace":"self = <test_api.TestApi object at 0x00000164D03EA150>, api_client = <utils.api_client.ApiClient object at 0x00000164CF4777D0>\n\n    @allure.title(\"Change data of non existent pet\")\n    def test_update_non_existent_pet_404(self, api_client):\n        pet = {\n            \"id\": 99,\n            \"category\": {\n                \"id\": 99,\n                \"name\": \"category99\"\n            },\n            \"name\": \"doggie99\",\n            \"photoUrls\": [\n                \"https://example.com/pet99_photo.jpg\"\n            ],\n            \"tags\": [\n                {\n                    \"id\": 99,\n                    \"name\": \"tag99\"\n                }\n            ],\n            \"status\": \"available\"\n        }\n        response = api_client.put(\"/pet/99\", pet)\n        print(response)\n        with allure.step(f\"Check status {response.status_code}\"):\n>           assert response.status_code == 404\nE           assert 405 == 404\nE            +  where 405 = <Response [405]>.status_code\n\ntests\\test_api.py:132: AssertionError","steps":[{"name":"Put request to '/pet/99'","time":{"start":1704888921653,"stop":1704888922809,"duration":1156},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"path","value":"'/pet/99'"},{"name":"data","value":"{'id': 99, 'category': {'id': 99, 'name': 'category99'}, 'name': 'doggie99', 'photoUrls': ['https://example.com/pet99_photo.jpg'], 'tags': [{'id': 99, 'name': 'tag99'}], 'status': 'available'}"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Check status 405","time":{"start":1704888922809,"stop":1704888922810,"duration":1},"status":"failed","statusMessage":"AssertionError: assert 405 == 404\n +  where 405 = <Response [405]>.status_code\n","statusTrace":"  File \"D:\\Pycharm_Projects\\api-testing-exam\\tests\\test_api.py\", line 132, in test_update_non_existent_pet_404\n    assert response.status_code == 404\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"f3e1875c96ae2e22","name":"stdout","source":"f3e1875c96ae2e22.txt","type":"text/plain","size":17}],"parameters":[],"stepsCount":2,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_api"},{"name":"subSuite","value":"TestApi"},{"name":"host","value":"DESKTOP-CPFF6BR"},{"name":"thread","value":"27720-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"41ea2a4c3e71aa6b","reportUrl":"../4/index.html#testresult/41ea2a4c3e71aa6b","status":"failed","statusDetails":"AssertionError: assert 405 == 404\n +  where 405 = <Response [405]>.status_code","time":{"start":1704888921653,"stop":1704888922810,"duration":1157}}]},"tags":[]},"source":"b2c870d6d4dbc63d.json","parameterValues":[]}